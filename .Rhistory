j[onDJs,onDJs]
j2[onDJs,onDJs]
j
attributes(j)
j$call
j$Diag
j
attributes(j)
j$method
is(j)
attributes(j)
j$method
j["TM",]
j["TM"]
j["TM","TM"]
j["TM"]
j[["TM"]]
j[[1]]
j[[1,1]]
j[[1,3]]
j[[1:2]]
j[[1:3]]
j[[1:1]]
j[[1:2]]
j[[1:20]]
j[["TW"]]
j[["TW":"TT"]]
row.names(j)
col.names(j)
colnames(j)
j
j2
kmeans(j2,5)$cluster
kmeans(j,5)$cluster
?kmeans
j2
kmeans(j,5)$cluster
kmeans(j2,5)$cluster
kmeans
kmeans(j2,5)$cluster
kmeans(as.matrix(j),5)$cluster
kmeans(j2,5)$cluster
kmeans(na.exclude(j2),5)$cluster
na.exclude(j2)
?na.exclude
kmeans(na.omit(j2),5)$cluster
na.omit(j2)
?as.matrix
na.omit(j)
na.omit(as.matrix(j))
j2<-na.omit(as.matrix(j))
is(j2)
attributes(j2)
kmeans(j2,5)$cluster
clusplot(as.matrix(j), clust, main="DJ Similiarity Clusters",color=T, shade=T, labels=2, lines=0)
library(stringr)
library(tm)
library(dplyr)
library("ggplot2")
library("wordcloud")
library("RColorBrewer")
library("SnowballC")
library(igraph)
library(cluster)
library(reshape2)
library(proxy)
load("djDocs.RData")
print("Create document corpus and term document matrices")
djCorpus <- Corpus(VectorSource(djDocs$artists))
for (i in 1:length(djCorpus)) {
meta(djCorpus[[i]], tag="ID") <- djDocs$DJ[i]
meta(djCorpus[[i]], tag="id") <- djDocs$DJ[i]
meta(djCorpus[[i]], tag="DJ") <- djDocs$DJ[i]
meta(djCorpus[[i]], tag="onMic") <- djDocs$onMic[i]
}
#djDocs<-inner_join(djDocs,DJKey[,c("DJ","cluster")])
djdtm<-DocumentTermMatrix(djCorpus)%>%removeSparseTerms(SPARSE)
j<-getSimilarity(djdtm)
j
is(j)
rm(j)
#-----------------------------------------------------------
getSimilarity<-function(djdtm=djdtm){
m2<-as.matrix(djdtm)
rownames(m2)<-djDocs$DJ
# get similarity
#j<-simil(m2,method="Jaccard")
j<-jaccard(m2)
save(j,file="djSimilarity.RData")
return(j)
}
jaccard <- function(m) {
#http://stackoverflow.com/questions/36220585/efficient-jaccard-similarity-documenttermmatrix
## common values:
A <- tcrossprod(m)
im <- which(A > 0, arr.ind=TRUE, useNames = FALSE)
b <- rowSums(m)
Aim <- A[im]
sparseMatrix(
i = im[,1],
j = im[,2],
x = Aim / (b[im[,1]] + b[im[,2]] - Aim),
dims = dim(A)
)
#preserve row/column names, if any
rownames(J)<-rownames(m)
colnames(J)<-rownames(m)
return( J )
}
#-----------------------------------------------------------
getSimilarity<-function(djdtm=djdtm){
m2<-as.matrix(djdtm)
rownames(m2)<-djDocs$DJ
# get similarity
#j<-simil(m2,method="Jaccard")
j<-jaccard(m2)
save(j,file="djSimilarity.RData")
return(j)
}
j<-getSimilarity(djdtm)
library(Matrix)
j<-getSimilarity(djdtm)
jaccard <- function(m) {
#http://stackoverflow.com/questions/36220585/efficient-jaccard-similarity-documenttermmatrix
## common values:
A <- tcrossprod(m)
im <- which(A > 0, arr.ind=TRUE, useNames = FALSE)
b <- rowSums(m)
Aim <- A[im]
J<-sparseMatrix(
i = im[,1],
j = im[,2],
x = Aim / (b[im[,1]] + b[im[,2]] - Aim),
dims = dim(A)
)
#preserve row/column names, if any
rownames(J)<-rownames(m)
colnames(J)<-rownames(m)
return( J )
}
j<-getSimilarity(djdtm)
j
is(j)
clust<-kmeans(j,CLUSTERS)$cluster
clust
clusplot(as.matrix(j), clust, main="DJ Similiarity Clusters",color=T, shade=T, labels=2, lines=0)
onDJs<- DJKey%>%filter(onMic==TRUE)%>%select(DJ)%>%unlist()
offDJs<-DJKey%>%filter(onMic==FALSE)%>%select(DJ)%>%unlist()
AllDJs<-DJKey%>%select(DJ)%>%unlist()
onDJs
offDJs
j
is(j)
attributes(j)
summarise(j)
j[onDJs,onDJs]
j["TM"]
j["TM",]
j["TM","TM"]
j["TM","TW"]
j["TW","TW"]
j[onDJs,onDJs]
j[c("TW","TM","TW"]
j[c("TW","TM"),"TW"]
j[c("TW","TM")]
j[c("TW","TM"),]
is(c("TW","TM"))
is(onDJs)
as.vector(onDJs)
onDJs<- DJKey%>%filter(onMic==TRUE)%>%select(DJ)%>%unlist()%>%as.vector()
j[onDJs,onDJs]
onDJs<- DJKey%>%filter(onMic==TRUE)%>%select(DJ)%>%unlist()%>%as.vector()
offDJs<-DJKey%>%filter(onMic==FALSE)%>%select(DJ)%>%unlist()%>%as.vector()
AllDJs<-DJKey%>%select(DJ)%>%unlist()%>%as.vector()
assignClusters(j[onDJs,onDJs])
assignClusters(j[offDJs,offDJs])
assignClusters(j[allDJs,allDJs])
assignClusters(j)
assignClusters(j[onDJs,onDJs])
m2<-as.matrix(djdtm)
rownames(m2)<-djDocs$DJ
# get similarity
j<-simil(m2,method="Jaccard")
j2<-j
j<-jaccard(m2)
clust<-kmeans(j,CLUSTERS)$cluster
assignClusters(j)
assignClusters(j2)
assignClusters(j)
assignClusters(j2)
length(assignClusters(j2))
length(assignClusters(j))
assignClusters(j[onDJs,onDJs])
assignClusters(j2[onDJs,onDJs])
j2["TW",]
j2$simi["TW",]
j2[1]
j2[2]
j2[1:100]
j2[1:10]
attributes(j2[1:10])
attributes(j2)
j2$Upper
attr(j2)
attributes(j2)
attr(j2,labels)
attr(j2,"labels")
attr(j2,"Labels")
class(j)
class(j2)
DJKey$DJ
DJKey$DJ%in%onDJs
DJKey[DJKey$DJ%in%onDJs]
DJKey[DJKey$DJ%in%onDJs,]
micStatus=c("on","off","both")
mic<-micStatus[1]
#------------------------------------------------------------------
#plot stuff depending on onmic or offmic status
plotStuff<-function(djtdm=djdtm,j=j,DJKey=DJkey){
makeWordCloud(djtdm)
assignClusters(j)
print(DJKey$ShowName)
}
switch(mic,
on = plotStuff(djtdm_on,j[onDJs,onDJs],DJKey[DJKey$DJ%in%onDJs,]),
off = plotStuff(djtdm_off,j[offDJs,offDJs],DJKey[DJKey$DJ%in%offDJs,]),
all = plotStuff(djtdm_all,DJKey)
)
micStatus=c("on","off","both")
mic<-micStatus[2]
switch(mic,
on = plotStuff(djtdm_on,j[onDJs,onDJs],DJKey[DJKey$DJ%in%onDJs,]),
off = plotStuff(djtdm_off,j[offDJs,offDJs],DJKey[DJKey$DJ%in%offDJs,]),
all = plotStuff(djtdm_all,DJKey)
)
whichDJ <- "TW"
compareDJ<-"TM"
likeDJs<-data.frame(similarity=as.matrix(j)[whichDJ,])
likeDJs<-likeDJs%>%add_rownames(var="DJ")
likeDJs<-arrange(likeDJs,similarity)
??add_rownames
likeDJs<-data.frame(similarity=as.matrix(j)[whichDJ,])
likeDJs
likeDJs<-arrange(likeDJs,similarity)
likeDJs
likeDJs<-arrange(likeDJs,desc(similarity))
likeDJs
likeDJs<-data.frame(similarity=as.matrix(j)[whichDJ,])
likeDJs
likeDJs<-arrange(likeDJs,desc(similarity))
likeDJs
library(dplyr)
likeDJs<-likeDJs%>%add_rownames(var="DJ")
likeDJs$DJ<-rownames(likeDJs)
likeDJs
likeDJs<-data.frame(similarity=as.matrix(j)[whichDJ,])
#likeDJs<-likeDJs%>%add_rownames(var="DJ")
likeDJs$DJ<-rownames(likeDJs)
likeDJs<-arrange(likeDJs,desc(similarity))
likeDJs
likeDJs<-arrange(likeDJs,desc(similarity))
arrange(likeDJs,desc(similarity))
arrange(likeDJs,desc(similarity))[-1]
arrange(likeDJs,desc(similarity))[-1,]
`rownames(likeDJs)<-(NULL)
rownames(likeDJs)<-(NULL)
likeDJs
likeDJs<-data.frame(similarity=as.matrix(j)[whichDJ,])
#likeDJs<-likeDJs%>%add_rownames(var="DJ")
likeDJs$DJ<-rownames(likeDJs)
rownames(likeDJs)<-NULL
likeDJs<-arrange(likeDJs,desc(similarity))[-1,] #sort descending and remove self DJ
likeDJs
rownames(likeDJs)<-NULL
likeDJs
commonArtists<-intersect(artistTokens[which(artistTokens$DJ==whichDJ),]$artistToken,artistTokens[which(artistTokens$DJ==compareDJ),]$artistToken)
sample(commonArtists,20)
compareDJ<-likeDJs[1,"DJ"]
compareDJ
print(DJKey[DJ==whichDJ,])
print(DJKey[DJ==compareDJ,])
compareDJ
print(DJKey["TM",])
print(DJKey["TW",])
print(DJKey)
print(DJKey%>%select(DJ=="TM"))
DJKey%>%select(DJ=="TM")
DJKey%>%select(DJ=="MS")
DJKey%>%filter(DJ=="MS")
print(DJKey%>%filter(DJ==compareDJ)
)
print(DJKey%>%filter(DJ==compareDJ)%>%select(ShowName))
print(DJKey%>%filter(DJ==compareDJ)%>%select(ShowName))
whichShow<-DJKey%>%filter(DJ==whichDJ)%>%select(ShowName)
compareShow<-DJKey%>%filter(DJ==compareDJ)%>%select(ShowName)
paste(whichShow,"is most similar to",compareShow)
whichShow
whichShow<-DJKey%>%filter(DJ==whichDJ)%>%select(ShowName)%>%as.character()
whichShow
DJKey
whichShow<-DJKey%>%filter(DJ==whichDJ)
whichShow
DJKey%>%filter(DJ==whichDJ)
DJKey%>%filter(DJ==whichDJ)%>%.$ShowName
DJKey%>%filter(DJ==whichDJ)%>%.$ShowName%>%as.character()
whichShow<-DJKey%>%filter(DJ==whichDJ)%>%.$ShowName%>%as.character()
compareShow<-DJKey%>%filter(DJ==compareDJ)%>%.$ShowName%>%as.character()
paste(whichShow,"is most similar to",compareShow)
View(DJKey)
paste(whichShow,"is most similar to",compareShow)
commonArtists<-intersect(artistTokens[which(artistTokens$DJ==whichDJ),]$artistToken,artistTokens[which(artistTokens$DJ==compareDJ),]$artistToken)
print(sample(commonArtists,20))
paste("Similarity Index:",likeDJs[1,"similarity"])
?paste
paste("Similarity Index:",format(likeDJs[1,"similarity"]),digits=2)
paste("Similarity Index:",format(likeDJs[1,"similarity"],digits=2)
)
paste("Similarity Index:",format(likeDJs[1,"similarity"],digits=2),"/1.00")
paste(whichShow,"is most similar to",compareShow)
paste("Similarity Index:",format(likeDJs[1,"similarity"],digits=2),"/1.00")
commonArtists<-intersect(artistTokens[which(artistTokens$DJ==whichDJ),]$artistToken,artistTokens[which(artistTokens$DJ==compareDJ),]$artistToken)
print(sample(commonArtists,20))
print(as.data.frame(sample(commonArtists,20)))
print(as.data.frame(sample(commonArtists,20)))
print(as.data.frame(sample(commonArtists,20)))
likeDJs<-data.frame(similarity=as.matrix(j)[whichDJ,])
#likeDJs<-likeDJs%>%add_rownames(var="DJ")
likeDJs$DJ<-rownames(likeDJs)
likeDJs<-arrange(likeDJs,desc(similarity))[-1,] #sort descending and remove self DJ
rownames(likeDJs)<-NULL
compareDJ<-likeDJs[1,"DJ"]
whichShow<-DJKey%>%filter(DJ==whichDJ)%>%.$ShowName%>%as.character()
compareShow<-DJKey%>%filter(DJ==compareDJ)%>%.$ShowName%>%as.character()
paste(whichShow,"is most similar to",compareShow)
paste("Similarity Index:",format(likeDJs[1,"similarity"],digits=2),"/1.00")
commonArtists<-intersect(artistTokens[which(artistTokens$DJ==whichDJ),]$artistToken,artistTokens[which(artistTokens$DJ==compareDJ),]$artistToken)
print(as.data.frame(sample(commonArtists,20)))
load("DJKey.RData")
str_replace_all(DJKey$ShowName,"WFMU","")
str_replace_all(DJKey$ShowName,"WFMU|:|-|Playlists and Archives","")
str_replace_all(DJKey$ShowName,"(P|p)laylists (and|&) (A|a)rchives","")
str_replace_all(DJKey$ShowName,"(P|p)laylist|recent","")
str_replace_all(DJKey$ShowName,"(P|p)laylist|(R|r)ecent","")
str_extract(DJKey$ShowName,"WFMU")
DJKey$ShowName<-str_replace_all(DJKey$ShowName,"(P|p)laylists (and|&) (A|a)rchives","")
DJKey$ShowName<-str_replace_all(DJKey$ShowName,"-","")
DJKey$ShowName<-str_replace_all(DJKey$ShowName,"(P|p)laylist|(R|r)ecent","")
DJKey$ShowName<-str_replace_all(DJKey$ShowName,"WFMU|wfmu","")
DJKey$ShowName<-str_trim(DJKey$ShowName)
save(DJKey,file="DJKey.RData")
likeDJs<-data.frame(similarity=as.matrix(j)[whichDJ,])
#likeDJs<-likeDJs%>%add_rownames(var="DJ")
likeDJs$DJ<-rownames(likeDJs)
likeDJs<-arrange(likeDJs,desc(similarity))[-1,] #sort descending and remove self DJ
rownames(likeDJs)<-NULL
#since we sorted in order of descending similarity the first row has the most similar DJ
compareDJ<-likeDJs[1,"DJ"]
whichShow<-DJKey%>%filter(DJ==whichDJ)%>%.$ShowName%>%as.character()
compareShow<-DJKey%>%filter(DJ==compareDJ)%>%.$ShowName%>%as.character()
paste(whichShow,"is most similar to",compareShow)
paste("Similarity Index:",format(likeDJs[1,"similarity"],digits=2),"/1.00")
commonArtists<-intersect(artistTokens[which(artistTokens$DJ==whichDJ),]$artistToken,artistTokens[which(artistTokens$DJ==compareDJ),]$artistToken)
print(as.data.frame(sample(commonArtists,20)))
ggplot(DJKey[1:20,],aes(ShowName,artistCount))+geom_bar(stat="identity")+coord_flip()
DJKey<-addArtistCount(DJKey,artistTokens)
DJKey<-filter(DJKey,artistCount>100)
artistTokens<-semi_join(artistTokens,DJKey)
#regroup
artistTokens<-artistTokens%>%group_by(DJ)
artistTokens<-artistTokens%>%group_by(DJ)
save(artistTokens,file="artistTokens.RData")
load("artistTokens.RData")
#What DJs have played the most artists
ggplot(DJKey[1:20,],aes(ShowName,artistCount))+geom_bar(stat="identity")+coord_flip()
#what onMic DJs have the most artist diversity
ggplot(DJKey%>%filter(onMic==FALSE)%>%.[1:20,],aes(ShowName,artistCount))+geom_bar(stat="identity")+coord_flip()
#plot stuff depending on onmic or offmic status
plotStuff<-function(djtdm=djdtm,j=j,DJKey=DJkey){
makeWordCloud(djtdm)
assignClusters(j)
ggplot(DJKey[1:20,],aes(ShowName,artistCount))+geom_bar(stat="identity")+coord_flip()
print(DJKey$ShowName)
}
switch(mic,
on = plotStuff(djtdm_on,j[onDJs,onDJs],DJKey[DJKey$DJ%in%onDJs,]),
off = plotStuff(djtdm_off,j[offDJs,offDJs],DJKey[DJKey$DJ%in%offDJs,]),
all = plotStuff(djtdm_all,DJKey)
)
switch(mic,
on = plotStuff(djtdm_on,j[onDJs,onDJs],DJKey[DJKey$DJ%in%onDJs,]),
off = plotStuff(djtdm_off,j[offDJs,offDJs],DJKey[DJKey$DJ%in%offDJs,]),
all = plotStuff(djtdm_all,DJKey)
)
mic
#plot stuff depending on onmic or offmic status
plotStuff<-function(djtdm=djdtm,j=j,DJKey=DJkey){
makeWordCloud(djtdm)
assignClusters(j)
ggplot(DJKey[1:20,],aes(ShowName,artistCount))+geom_bar(stat="identity")+coord_flip()
print(DJKey$ShowName)
}
switch(mic,
on = plotStuff(djtdm_on,j[onDJs,onDJs],DJKey[DJKey$DJ%in%onDJs,]),
off = plotStuff(djtdm_off,j[offDJs,offDJs],DJKey[DJKey$DJ%in%offDJs,]),
all = plotStuff(djtdm_all,DJKey)
)
plotStuff<-function(djtdm=djdtm,j=j,DJKey=DJkey){
#makeWordCloud(djtdm)
#assignClusters(j)
ggplot(DJKey[1:20,],aes(ShowName,artistCount))+geom_bar(stat="identity")+coord_flip()
print(DJKey$ShowName)
}
switch(mic,
on = plotStuff(djtdm_on,j[onDJs,onDJs],DJKey[DJKey$DJ%in%onDJs,]),
off = plotStuff(djtdm_off,j[offDJs,offDJs],DJKey[DJKey$DJ%in%offDJs,]),
all = plotStuff(djtdm_all,DJKey)
)
ggplot(DJKey[1:20,],aes(ShowName,artistCount))+geom_bar(stat="identity")+coord_flip()
print(ggplot(DJKey[1:20,],aes(ShowName,artistCount))+geom_bar(stat="identity")+coord_flip())
switch(mic,
on = plotStuff(djtdm_on,j[onDJs,onDJs],DJKey[DJKey$DJ%in%onDJs,]),
off = plotStuff(djtdm_off,j[offDJs,offDJs],DJKey[DJKey$DJ%in%offDJs,]),
all = plotStuff(djtdm_all,DJKey)
)
switch(mic,
on = plotStuff(djtdm_on,j[onDJs,onDJs],DJKey[DJKey$DJ%in%onDJs,]),
off = plotStuff(djtdm_off,j[offDJs,offDJs],DJKey[DJKey$DJ%in%offDJs,]),
all = plotStuff(djtdm_all,DJKey)
)
debugSource('~/R/wfmu/analyze.r')
source('~/R/wfmu/analyze.r')
source('~/R/wfmu/analyze.r')
assignClusters(j)
source('~/R/wfmu/analyze.r')
install.packages("ggfortify")
library(ggfortify)
autoplot(kdj,data=j)
kdj<-kmeans(j,CLUSTERS)
clust<-kdj$cluster
autoplot(kdj,data=j)
kmeans
set.seed(1)
kdj<-kmeans(j,CLUSTERS)
clust<-kdj$cluster
autoplot(kdj,data=j)
autoplot(kmeans(USArrests, 3), data = USArrests)
library(devtools)
install_github('sinhrks/ggfortify')
library(dplyr)
install.packages(c("Hmisc", "RcmdrMisc", "rgdal", "rgeos"))
install.packages("dplyr", repos = "http://mran.revolutionanalytics.com")
install.packages("dplyr", repos = "http://mran.revolutionanalytics.com")
setRepositories(addURLs = "http://mran.revolutionanalytics.com")
install.packages("dplyr")
library(dplyr)
library(ggfortify)
setRepositories()
install.packages("dplR")
install.packages("dplyr")
install.packages("dplyr")
setRepositories()
1
clusplot(as.matrix(j), clust, main="DJ Similiarity Clusters",color=T, shade=T, labels=2, lines=0)
source('~/R/wfmu/analyze.r')
#library(ggfortify)
source('~/R/wfmu/analyze.r')
source('~/R/wfmu/analyze.r')
print(ggplot(DJKey[1:20,],aes(ShowName,artistCount))+geom_bar(stat="identity")+coord_flip())
print(ggplot(DJKey[1:20,],aes(ShowName,artistCount))+geom_bar(stat="identity")+coord_flip())
print(ggplot(DJKey[1:20,],aes(ShowName,artistCount))+geom_bar(stat="identity")+coord_flip())
library(shiny)
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs), col = 'darkgray', border = 'white')
})
}
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput("obs", "Number of observations:", min = 10, max = 500, value = 100)
),
mainPanel(plotOutput("distPlot"))
)
)
shinyApp(ui = ui, server = server)
source('~/R/wfmu/WFMU_analyzeShiny.r')
source('~/R/wfmu/WFMU_analyzeShiny.r')
source('~/R/wfmu/WFMU_analyzeShiny.r')
source('~/R/wfmu/WFMU_analyzeShiny.r')
source('~/R/wfmu/WFMU_analyzeShiny.r')
source('~/R/wfmu/WFMU_analyzeShiny.r')
source('~/R/wfmu/WFMU_analyzeShiny.r')
source('~/R/wfmu/WFMU_analyzeShiny.r')
source('~/R/wfmu/WFMU_analyzeShiny.r')
shinyApp(ui = ui, server = server)
source('~/R/wfmu/WFMU_analyzeShiny.r')
shinyApp(ui = ui, server = server)
source('~/R/wfmu/WFMU_analyzeShiny.r')
?memoise
source('~/R/wfmu/WFMU_analyzeShiny.r')
shinyApp(ui = ui, server = server)
choices = micStatus),
choices = books),
source('~/R/wfmu/WFMU_analyzeShiny.r')
shinyApp(ui = ui, server = server)
source('~/R/wfmu/WFMU_analyzeShiny.r')
shinyApp(ui = ui, server = server)
source('~/R/wfmu/WFMU_analyzeShiny.r')
source('~/R/wfmu/WFMU_analyzeShiny.r')
shinyApp(ui = ui, server = server)
?terms
terms()
