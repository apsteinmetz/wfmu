playlist = data.frame()
for (n in 1:length(playlistURL)) {
print(n)
# first two columns contain artist and track name, leave the rest
temp <- (html(playlistURL[n])%>%html_node(xpath="//table[2]")%>%html_table(fill=TRUE))[,1:2]
playlist<-rbind(playlist,c(dj,temp))
return(playlist)
}
}
seq_along(DJURLs)
DJ
playlistURL
getPlaylist(playlistURL,DJ)
getPlaylist(playlistURL,DJ)
playlist = data.frame()
for (n in 1:length(playlistURL)) {
print(n)
# first two columns contain artist and track name, leave the rest
temp <- (html(playlistURL[n])%>%html_node(xpath="//table[2]")%>%html_table(fill=TRUE))[,1:2]
playlist<-rbind(playlist,c(dj,temp))
return(playlist)
}
getPlaylist <- function(playlistURL,dj) {
playlist = data.frame()
for (n in 1:length(playlistURL)) {
print(n)
# first two columns contain artist and track name, leave the rest
temp <- (html(playlistURL[n])%>%html_node(xpath="//table[2]")%>%html_table(fill=TRUE))[,1:2]
playlist<-rbind(playlist,cbind(dj,temp))
return(playlist)
}
}
getPlaylist(playlistURL,DJ)
playlistURL
debugSource('~/R/wfmu/scrapeplaylists.R')
debugSource('~/R/wfmu/scrapeplaylists.R')
View(playlist)
debugSource('~/R/wfmu/scrapeplaylists.R')
View(allDJPlayLists)
DJ
dj
showName
View(allDJPlayLists)
View(allDJPlayLists)
playlist
playListRaw<- html(allDJURLs)
# library("RColorBrewer")
debugSource('~/R/wfmu/scrapeplaylists.R')
debugSource('~/R/wfmu/scrapeplaylists.R')
single()
singleDJ
DJ
playlistURL
temp
playlist
allDJPlayLists
head(allDJPlayLists)
temp
source('~/R/wfmu/scrapeplaylists.R')
temp
source('~/R/wfmu/scrapeplaylists.R')
debugSource('~/R/wfmu/scrapeplaylists.R')
temp
playlist
playlist
temp
temp
playlist
dj
dj
temp
temp
temp
playlistURL
temp
?html_table
\html_table
html_table
temp
names(temp)
temp[-1,]
temp[1,]
names(temp)[1]='X1'
names(temp)[1]=='X1'
names(temp)
temp
debugSource('~/R/wfmu/scrapeplaylists.R')
debugSource('~/R/wfmu/scrapeplaylists.R')
debugSource('~/R/wfmu/scrapeplaylists.R')
debugSource('~/R/wfmu/scrapeplaylists.R')
names(temp)
names(temp)
debugSource('~/R/wfmu/scrapeplaylists.R')
temp
playlist
debugSource('~/R/wfmu/scrapeplaylists.R')
debugSource('~/R/wfmu/scrapeplaylists.R')
playlist
temp
playlist
names(temp)
playlist
names(temp)
names(temp)
playlist
temp
head(playlist)
tail(playlist)
playlist
playlist
playlist
allDJPlayLists
tail(allDJPlayLists)
tail(allDJPlayLists)
temp
temp
allDJPlayLists
temp
temp
temp
playlistURL
playlistURL
dj
temp
temp
dj
playlistURLs
playlistURL
temp
playlist
temp
temp
dj
playlist
playlistURL
playlistURLs
n
DJURLs
DJURLs[16]
getPlaylist(DJURLS[16],'BC')
testdj <- DJURLS[16]
DJURLs
testdj <- DJURLS[16]
testdj <- DJURLs[16]
DJ <- sub(".xml","",sub("http://wfmu.org/playlistfeed/","",testdj))
DJ
singleDJ<- html(DJURLs[n])
n
singleDJ
playlistURL<-html_nodes(singleDJ,xpath = "//guid") %>%html_text()
showName <- html_node(singleDJ,"title")%>%html_text()
showName <- sub("WFMU's recent playlists from ","",showName)
DJ <- sub(".xml","",sub("http://wfmu.org/playlistfeed/","",DJURLs[n]))
allDJPlayLists = rbind(allDJPlayLists, getPlaylist(playlistURL = playlistURL,dj = DJ))
temp
n
playlistURL
playlistURL[16]
length(playlistURL)
playlistURL[6]
temp <- (html(playlistURL[n])%>%html_node(xpath="//table[2]")%>%html_table(fill=TRUE))
temp <- (html(playlistURL[6])%>%html_node(xpath="//table[2]")%>%html_table(fill=TRUE))
temp
dim(temp)
temp
tc1<-temp
source('~/R/wfmu/scrapeplaylists.R')
dim(temp)
time(temp)[2]
time(temp)[1]
time(temp)[[1]]
time(temp)[[2]]
dim(temp)[2]
dim(temp)[1]
source('~/R/wfmu/scrapeplaylists.R')
DJURLs[6]
n
DJURLs[16]
singleDJ
showName
showName <- sub("WFMU's recent playlists from ","",showName)
singleDJ<- html(DJURLs[n])
playlistURL<-html_nodes(singleDJ,xpath = "//guid") %>%html_text()
showName <- html_node(singleDJ,"title")%>%html_text()
showName <- sub("WFMU's recent playlists from ","",showName)
showName
DJKey = data.frame()
DJ <- sub(".xml","",sub("http://wfmu.org/playlistfeed/","",DJURLs[n]))
DJKey<-rbind(DJ=DJ,ShowName=showName)
DJKey
DJ
?data.frame
DJKey = data.frame()
DJKey<-rbind(DJKey,c(DJ=DJ,ShowName=showName))
DJKey
DJKey = data.frame()
DJKey<-rbind(DJKey,data.frame(DJ=DJ,ShowName=showName))
DJKey
allDJPlayLists = rbind(allDJPlayLists, getPlaylist(playlistURL = playlistURL,dj = DJ))
source('~/R/wfmu/scrapeplaylists.R')
DJKey
allDJPlayLists
allDJPlayLists$Artist
allDJPlayLists$Track
allDJPlayLists$Artist
allDJPlayLists$Track
is(allDJPlayLists$Track)
is(allDJPlayLists$Track[1])
is(allDJPlayLists$Artist[1])
dj
DK
DJ
playlistURL
is(allDJPlayLists$DJ[1])
allDJPlayLists$DJ
names(allDJPlayLists)
is(allDJPlayLists$dj[1])
allDJPlayLists$dj
allDJPlayLists = rbind(allDJPlayLists, getPlaylist(playlistURL = playlistURL,dj = DJ))
allDJPlayLists = rbind(allDJPlayLists, getPlaylist(playlistURL = playlistURL,dj = DJ))
temp
n
temp <- (html(playlistURL[i])%>%html_node(xpath="//table[2]")%>%html_table(fill=TRUE))[,1:2]
temp
if (names(temp)[1]=="X1") {
names(temp)<- temp[1,]
temp <- temp[-1,]
}
temp
# order of artist, track(or title) varies.   Fix it
dim(temp)[2]
if (dim(temp)[2]>1) {  #ignore single column playlists
if (names(temp)[1]=="Artist") {
playlist<-rbind(playlist,cbind(dj,temp["Artist"],Track=temp[,2]))
}
else {
playlist<-rbind(playlist,cbind(dj,temp["Artist"],Track=temp[,1]))
}
}
playlist
i<-6
temp <- (html(playlistURL[i])%>%html_node(xpath="//table[2]")%>%html_table(fill=TRUE))[,1:2]
temp <- (html(playlistURL[i])%>%html_node(xpath="//table[2]")%>%html_table(fill=TRUE))
temp
# try to correct tables without headers
if (names(temp)[1]=="X1") {
names(temp)<- temp[1,]
temp <- temp[-1,]
}
# order of artist, track(or title) varies.   Fix it
if (dim(temp)[2]>1) {  #ignore single column playlists
if (names(temp)[1]=="Artist") {
playlist<-rbind(playlist,cbind(dj,temp["Artist"],Track=temp[,2]))
}
else {
playlist<-rbind(playlist,cbind(dj,temp["Artist"],Track=temp[,1]))
}
}
playlist
i<-5
print(i)
# first two columns contain artist and track name, leave the rest
temp <- (html(playlistURL[i])%>%html_node(xpath="//table[2]")%>%html_table(fill=TRUE))
# try to correct tables without headers
if (names(temp)[1]=="X1") {
names(temp)<- temp[1,]
temp <- temp[-1,]
}
# order of artist, track(or title) varies.   Fix it
if (dim(temp)[2]>1) {  #ignore single column playlists
if (names(temp)[1]=="Artist") {
playlist<-rbind(playlist,cbind(dj,temp["Artist"],Track=temp[,2]))
}
else {
playlist<-rbind(playlist,cbind(dj,temp["Artist"],Track=temp[,1]))
}
}
temp
playlist
dj<-"BC"
if (names(temp)[1]=="X1") {
names(temp)<- temp[1,]
temp <- temp[-1,]
}
# order of artist, track(or title) varies.   Fix it
if (dim(temp)[2]>1) {  #ignore single column playlists
if (names(temp)[1]=="Artist") {
playlist<-rbind(playlist,cbind(dj,temp["Artist"],Track=temp[,2]))
}
else {
playlist<-rbind(playlist,cbind(dj,temp["Artist"],Track=temp[,1]))
}
}
playlist
i<-6
temp <- (html(playlistURL[i])%>%html_node(xpath="//table[2]")%>%html_table(fill=TRUE))
# try to correct tables without headers
if (names(temp)[1]=="X1") {
names(temp)<- temp[1,]
temp <- temp[-1,]
}
# order of artist, track(or title) varies.   Fix it
if (dim(temp)[2]>1) {  #ignore single column playlists
if (names(temp)[1]=="Artist") {
playlist<-rbind(playlist,cbind(dj,temp["Artist"],Track=temp[,2]))
}
else {
playlist<-rbind(playlist,cbind(dj,temp["Artist"],Track=temp[,1]))
}
}
playlist
source('~/R/wfmu/scrapeplaylists.R')
showname
showName
allDJPlayLists = rbind(allDJPlayLists, getPlaylist(playlistURL = playlistURL,dj = DJ))
playlistURL
i
playlistURL[i]
showName
allDJPlayLists = rbind(allDJPlayLists, getPlaylist(playlistURL = playlistURL,dj = DJ))
#--------------------------------------------------------------------------
#get all playlists for a DJ
# TROUBLE all play list tables are not the same. Headers might not match
getPlaylist <- function(plURL,dj) {
playlist = data.frame()
for (i in 1:length(plURL)) {
print(paste(dj,i))
# first two columns contain artist and track name, leave the rest
temp <- (html(plURL[i])%>%html_node(xpath="//table[2]")%>%html_table(fill=TRUE))
# try to correct tables without headers
if (names(temp)[1]=="X1") {
names(temp)<- temp[1,]
temp <- temp[-1,]
}
# order of artist, track(or title) varies.   Fix it
if (dim(temp)[2]>1) {  #ignore single column playlists
if (names(temp)[1]=="Artist") {
playlist<-rbind(playlist,cbind(dj,temp["Artist"],Track=temp[,2]))
}
else {
playlist<-rbind(playlist,cbind(dj,temp["Artist"],Track=temp[,1]))
}
}
}
return(playlist)
}
#
allDJPlayLists = rbind(allDJPlayLists, getPlaylist(playlistURL = playlistURL,dj = DJ))
allDJPlayLists = rbind(allDJPlayLists, getPlaylist(plURL = playlistURL,dj = DJ))
plURL
playlistURL
n
singleDJ<- html(DJURLs[n])
playlistURL<-html_nodes(singleDJ,xpath = "//guid") %>%html_text()
showName <- html_node(singleDJ,"title")%>%html_text()
showName <- sub("WFMU's recent playlists from ","",showName)
DJ <- sub(".xml","",sub("http://wfmu.org/playlistfeed/","",DJURLs[n]))
DJ
DJKey<-rbind(DJKey,data.frame(DJ=DJ,ShowName=showName))
allDJPlayLists = rbind(allDJPlayLists, getPlaylist(plURL = playlistURL,dj = DJ))
plURL
playlist = data.frame()
for (i in 1:length(plURL)) {
print(paste(dj,i))
# first two columns contain artist and track name, leave the rest
temp <- (html(plURL[i])%>%html_node(xpath="//table[2]")%>%html_table(fill=TRUE))
# try to correct tables without headers
if (names(temp)[1]=="X1") {
names(temp)<- temp[1,]
temp <- temp[-1,]
}
# order of artist, track(or title) varies.   Fix it
if (dim(temp)[2]>1) {  #ignore single column playlists
if (names(temp)[1]=="Artist") {
playlist<-rbind(playlist,cbind(dj,temp["Artist"],Track=temp[,2]))
}
else {
playlist<-rbind(playlist,cbind(dj,temp["Artist"],Track=temp[,1]))
}
}
}
playlistURL
singleDJ
playlistURL<-html_nodes(singleDJ,xpath = "//guid") %>%html_text()
playlistURL
getPlaylist(plURL = playlistURL,dj = DJ))
getPlaylist(plURL = playlistURL,dj = DJ)
plURL = playlistURL
dj
dj=DJ
dj
playlist = data.frame()
for (i in 1:length(plURL)) {
print(paste(dj,i))
# first two columns contain artist and track name, leave the rest
temp <- (html(plURL[i])%>%html_node(xpath="//table[2]")%>%html_table(fill=TRUE))
# try to correct tables without headers
if (names(temp)[1]=="X1") {
names(temp)<- temp[1,]
temp <- temp[-1,]
}
# order of artist, track(or title) varies.   Fix it
if (dim(temp)[2]>1) {  #ignore single column playlists
if (names(temp)[1]=="Artist") {
playlist<-rbind(playlist,cbind(dj,temp["Artist"],Track=temp[,2]))
}
else {
playlist<-rbind(playlist,cbind(dj,temp["Artist"],Track=temp[,1]))
}
}
}
i
print(paste(dj,i))
# first two columns contain artist and track name, leave the rest
temp <- (html(plURL[i])%>%html_node(xpath="//table[2]")%>%html_table(fill=TRUE))
plurl[1]
plURL[1]
temp <- (html(plURL[i])%>%html_node(xpath="//table[3]")%>%html_table(fill=TRUE))
temp <- (html(plURL[i])%>%html_node(xpath="//table[1]")%>%html_table(fill=TRUE))
temp
temp <- (html(plURL[i])%>%html_node(xpath="//table[4]")%>%html_table(fill=TRUE))
temp <- (html(plURL[i])%>%html_node(xpath="//table[2]")%>%html_table(fill=TRUE))
temp <- (html(plURL[i])%>%html_node(xpath="//table")%>%html_table(fill=TRUE))
temp
DJKey
tc1
temp
tc2<-i
i
plURL[i]
tc2<- html(plURL[i])
library(rvest)
tc2<- html(plURL[i])
tc2
html_nodes(tc2,"table")
html_nodes(tc2,"table")[1]
html_nodes(tc2,"table")[2]
html_nodes(tc2,"table")[2]%>%html_table(fill=TRUE)
html_nodes(tc2,xpath="//table")[2]%>%html_table(fill=TRUE)
html_nodes(tc2,xpath="//table[2]")%>%html_table(fill=TRUE)
html_nodes(tc2,xpath="//table")[2]%>%html_table(fill=TRUE)
html_nodes(tc2,xpath="//table")
temp <- (html(plURL[i])%>%html_node(xpath="//table")[2]%>%html_table(fill=TRUE))
temp <- (html(plURL[i])%>%html_node(xpath="//table")[2]%>%html_table(fill=TRUE))
html_nodes(tc2,xpath="//table")[2]%>%html_table(fill=TRUE)
tc2%>%html_nodes(xpath="//table")[2]%>%html_table(fill=TRUE)
tc2%>%html_nodes(xpath="//table")%>%[2]%>%html_table(fill=TRUE)
tc2%>%html_nodes(xpath="//table")%>%.[2]%>%html_table(fill=TRUE)
temp <- (html(plURL[i])%>%html_node(xpath="//table")%>%.[2]%>%html_table(fill=TRUE))
tc2%>%html_nodes(xpath="//table")%>%.[2]%>%html_table(fill=TRUE)
tc2%>%html_nodes(xpath="//table")%>%.[2]%>%html_table(fill=TRUE)->temp
temp
html(plURL[i])%>%html_node(xpath="//table")%>%.[2]%>%html_table(fill=TRUE)) -> temp
html(plURL[i])%>%html_node(xpath="//table")%>%.[2]%>%html_table(fill=TRUE) -> temp
html(plURL[i])%>%html_node(xpath="//table")%>%.[2]%>%html_table(fill=TRUE)
tc2%>%html_node(xpath="//table")%>%.[2]%>%html_table(fill=TRUE)
tc2%>%html_nodes(xpath="//table")%>%.[2]%>%html_table(fill=TRUE)
html(plURL[i])%>%html_nodes(xpath="//table")%>%.[2]%>%html_table(fill=TRUE) -> temp
temp
# try to correct tables without headers
if (names(temp)[1]=="X1") {
names(temp)<- temp[1,]
temp <- temp[-1,]
}
# order of artist, track(or title) varies.   Fix it
temp
names(temp)
is(temp)
temp<-html(plURL[i])%>%html_nodes(xpath="//table")%>%.[2]%>%html_table(fill=TRUE)
is(temp)
temp
temp<-html(plURL[i])%>%html_nodes(xpath="//table")%>%.[2]%>%html_table(fill=TRUE)%>%data.frame()
is(temp)
names(temp)
# try to correct tables without headers
if (names(temp)[1]=="X1") {
names(temp)<- temp[1,]
temp <- temp[-1,]
}
temp
# order of artist, track(or title) varies.   Fix it
if (dim(temp)[2]>1) {  #ignore single column playlists
if (names(temp)[1]=="Artist") {
playlist<-rbind(playlist,cbind(dj,temp["Artist"],Track=temp[,2]))
}
else {
playlist<-rbind(playlist,cbind(dj,temp["Artist"],Track=temp[,1]))
}
}
playlist
tc2
temp<-html(plURL[i])%>%html_nodes(xpath="//table[2]")%>%html_table(fill=TRUE)%>%data.frame()
temp
source('~/R/wfmu/scrapeplaylists.R')
temp
dj
plURL
debugSource('~/R/wfmu/scrapeplaylists.R')
playlist
debugSource('~/R/wfmu/scrapeplaylists.R')
temp
html(plURL[i])%>%html_nodes(xpath="//table")%>%.[2]%>%html_table(fill=TRUE)%>%data.frame()
html(plURL[i])%>%html_nodes(xpath="//table")%>%.[3]%>%html_table(fill=TRUE)%>%data.frame()
djPage<-html(plURL[i])
djPage
html_nodes(djPage,"table")
html_attrs(djPage)
?html_attrs()
html_nodes(djPage,"table")
html_nodes(djPage,"table border")
html_nodes(djPage,"table")
debugSource('~/R/wfmu/scrapeplaylists.R')
